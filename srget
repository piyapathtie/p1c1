#!/usr/bin/env python

from urlparse import urlparse
import socket as skt
import os
import sys
import asyncore

print "start"
class srget(object):
    def __init__(self, url):
        self.fileName = sys.argv[-2]
        self.tail = "tail.txt"
        self.host, self.path, self.severPort = self.parse_url(url)
        self.clientSocket = skt.socket(skt.AF_INET, skt.SOCK_STREAM)
        self.clientSocket.connect((self.host, self.severPort))
        self.receive = 0
        self.header = ""
        self.cl = 0
        self.fileSize = ""
        self.etag = ""
        if os.path.isfile(self.fileName) == False:
            self.request_str = self.make_request("GET", self.path, {"HOST": self.host, "Connection": "close"})
            self.clientSocket.send(self.request_str)
            self.download()
        else:
            with open (self.tail,'r') as t:
                for each in t:
                    self.fileSize = each 
            request = "GET "+self.path+" HTTP/1.1\r\n"+ "Host: "+self.host+"\r\n"+"Connection: close\r\n"+"Range: bytes={b}-\r\n\r\n".format(b=self.fileSize)
            self.clientSocket.send(request)
            self.makeResume()
       
    def makeResume(self):
        try :
            print "resuming..."
            with open (self.fileName, 'a+') as self.f:
                while True:
                    datareceive = self.clientSocket.recv(1)
                    self.header += datareceive 
                    if "\r\n\r\n" in self.header:
                        headerFinal, remain = self.header.split("\r\n\r\n")
                        self.receive += len(remain)
                        print self.receive
                        self.f.write(remain)
                        break

                # print headerFinal
                contentLen = headerFinal.split()  
                i = 0
                for each in contentLen:
                    if each == "Content-Length:":
                        self.cl = contentLen[i+1]
                        break
                    i += 1

                while self.receive < self.cl :
                    datareceive = self.clientSocket.recv(2048)
                    self.receive += len(datareceive)
                    self.f.write(datareceive)
                    # print self.receive, self.cl
                    if not datareceive:
                        break

            os.remove(self.tail)
        except KeyboardInterrupt:
            t = open (self.tail, 'w')
            t.write(str(self.receive+int(self.fileSize)))
            t.close()

    def download(self): 
        try :     
            with open (self.fileName, 'wb') as self.f:
                while True:
                    self.datareceive = self.clientSocket.recv(1)
                    self.header += self.datareceive 
                    if "\r\n\r\n" in self.header:
                        self.headerFinal, self.remain = self.header.split("\r\n\r\n")
                        self.receive += len(self.remain)
                        self.f.write(self.remain)
                        break
     
                # print self.headerFinal
                contentLen = self.headerFinal.split()  
                i = 0
                for each in contentLen:
                    # print each
                    if each == "Content-Length:":
                        self.cl = contentLen[i+1]
                    if each == "ETag:":
                        self.etag = contentLen[i+1]
                    i += 1
                
                self.cl = int(self.cl)
        
                while self.receive < self.cl:
                    datareceive = self.clientSocket.recv(2048)
                    self.receive += len(datareceive)
                    self.f.write(datareceive)
                    # print self.receive, self.cl
                    if not datareceive:
                        break
        except KeyboardInterrupt:
            t = open (self.tail, 'wb') 
            t.write(str(self.receive))
            t.close()
        self.clientSocket.close()
    
    def make_request(self,req_type, what, details, ver="1.1"):
        NL = "\r\n"
        req_line = "{verb} {w} HTTP/{v}".format(verb=req_type, w=what, v=ver)
        details = ["{name}: {v}".format(name=n,v=v) for (n,v) in details.iteritems()]
        detail_lines = NL.join(details)
        full_request = "".join([req_line, NL, detail_lines, NL, NL])
        return full_request

    def parse_url(self,url, DEFAULT_PORT=8080):
        parsed_url = urlparse(url)
        host, path, port = (parsed_url.hostname,parsed_url.path,parsed_url.port)
        if not port:
            port = DEFAULT_PORT
        return (host, path, port)

servName = sys.argv[-1]
if __name__ == '__main__':
    # print servName
    clients = [srget(servName)]
    asyncore.loop
print "finish"